#!/usr/bin/env python
# -*- encoding: utf-8; py-indent-offset: 4 -*-

def parse_access_logs(info):

    block = None
    result = {}
    for line in info:
        line_complete = " ".join(line)

        if line_complete.startswith("[") and line_complete.endswith("]"):
            block = line_complete[1:-1]
            result[block] = []
        else:
            result[block].append(line)

        if line_complete.startswith("error:"):
            result[block] = line_complete

    return result


def inventory_access_logs(parsed):

    for item in parsed.keys():
        yield(item, None)


def check_access_logs(item, params, parsed):
    base_regex= {
                 '101': '101',
                 '1XX': '1(?:0[023456789]|[1-9]\d)',
                 '200': '200',
                 '2XX': '2(?:0[1-9]|[1-9]0)',
                 '3XX': '3[0-9]{2}',
                 '400': '400',
                 '401': '401',
                 '403': '403',
                 '404': '404',
                 '4XX': '4(?:0[256789]|[1-9]\d)',
                 '500': '500',
                 '502': '502',
                 '503': '503',
                 '504': '504',
                 '5XX': '5(?:0[156789]|[1-9]\d)',
                 'XXX': '[06-9]\d\d',
                 'no_status': '\d*\D+\d*',
                }

    good_requests = ('200', '2XX', '3XX')
    counter = {}
    request_sum = 0
    failure_rate = 0.0

    severity = 0 # OK
    text = ""
    perfdata = []

    for key in base_regex.keys():
        counter[key] = 0

    if item in parsed:
        if parsed[item] and isinstance(parsed[item], list):
            for line in parsed[item]:
                (code, requests) = line

                for key, value in base_regex.iteritems():
                    if re.match(value, code):
                        counter[key] += int(requests)
                request_sum += int(requests)

                if request_sum > 0:
                    failure_rate = 100.0 - ((float(sum([counter[x] for x in good_requests])/float(request_sum)))*100.0)

                text = ("failure rate %0.2f%% for %d requests" % (failure_rate, request_sum))

                if params:
                    if "failure_rate" in params:
                        (warn, crit) = params["failure_rate"]

                        if failure_rate > crit:
                            severity = 2
                            text += " (over %0.2f%%)" % crit
                        elif failure_rate > warn:
                            severity = 1
                            text += " (over %0.2f%%)" % warn
        elif parsed[item] and isinstance(parsed[item], str):
            raise Exception("error in agent plugin - " + parsed[item])
        else:
            text = "no new request in access log found"


    else:
        severity = 3 # UNKN
        text = "item not present in agent output"


    for key in counter.keys():
        perfdata.append((key, counter[key]))

    perfdata = sorted(perfdata, key=lambda x: x[0])

    perfdata.append( ("failure_rate", failure_rate) )

    return (severity, text , perfdata)


check_info["access_logs"] = {
                            'check_function':          check_access_logs,
                            'inventory_function':      inventory_access_logs,
                            'parse_function':          parse_access_logs,
                            'service_description':     'HTTP Access Log %s',
                            'group':                   'access_logs',
                            'has_perfdata':            True
                          }
